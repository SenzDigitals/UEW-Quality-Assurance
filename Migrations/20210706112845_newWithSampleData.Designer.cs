// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UEW_Quality_Assurance.Data;

namespace UEW_Quality_Assurance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210706112845_newWithSampleData")]
    partial class newWithSampleData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("CourseLecturer", b =>
                {
                    b.Property<string>("CoursescourseID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("lecturerID")
                        .HasColumnType("int");

                    b.HasKey("CoursescourseID", "lecturerID");

                    b.HasIndex("lecturerID");

                    b.ToTable("CourseLecturer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.AppraisalPeriod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("academicYear")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("semester")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("AppraisalPeriod");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Campus", b =>
                {
                    b.Property<int>("campusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("campusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("location")
                        .HasColumnType("longtext");

                    b.HasKey("campusID");

                    b.ToTable("Campus");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Course", b =>
                {
                    b.Property<string>("courseID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("departmentID")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("longtext");

                    b.HasKey("courseID");

                    b.HasIndex("departmentID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Department", b =>
                {
                    b.Property<int>("departmentID")
                        .HasColumnType("int");

                    b.Property<int>("facultyID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("departmentID");

                    b.HasIndex("facultyID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Email", b =>
                {
                    b.Property<string>("To")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Body")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.HasKey("To");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Enrollment", b =>
                {
                    b.Property<int>("enrollmentID")
                        .HasColumnType("int");

                    b.Property<string>("courseID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("studentID")
                        .HasColumnType("varchar(255)");

                    b.HasKey("enrollmentID");

                    b.HasIndex("courseID");

                    b.HasIndex("studentID");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Faculty", b =>
                {
                    b.Property<int>("facultyID")
                        .HasColumnType("int");

                    b.Property<int>("campusID")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("departmentID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("facultyID");

                    b.HasIndex("campusID");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Lecturer", b =>
                {
                    b.Property<int>("lecturerID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Fname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lname")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<int>("departmentID")
                        .HasColumnType("int");

                    b.HasKey("lecturerID");

                    b.HasIndex("departmentID");

                    b.ToTable("Lecturer");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Prog", b =>
                {
                    b.Property<int>("programID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("departmentID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("programID");

                    b.HasIndex("departmentID");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Student", b =>
                {
                    b.Property<string>("studentID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("fname")
                        .HasColumnType("longtext");

                    b.Property<string>("lname")
                        .HasColumnType("longtext");

                    b.Property<int>("programID")
                        .HasColumnType("int");

                    b.HasKey("studentID");

                    b.HasIndex("programID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Threshold", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("limit")
                        .HasColumnType("int");

                    b.Property<int>("questions")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Threshold");
                });

            modelBuilder.Entity("CourseLecturer", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursescourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UEW_Quality_Assurance.Models.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("lecturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UEW_Quality_Assurance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Course", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("departmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Department", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Faculty", "faculty")
                        .WithMany("Departments")
                        .HasForeignKey("facultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("faculty");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Enrollment", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("courseID");

                    b.HasOne("UEW_Quality_Assurance.Models.Student", null)
                        .WithMany("Enrollment")
                        .HasForeignKey("studentID");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Faculty", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Campus", "Campus")
                        .WithMany("Faculties")
                        .HasForeignKey("campusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Lecturer", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("departmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Prog", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Department", "Department")
                        .WithMany("Program")
                        .HasForeignKey("departmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Student", b =>
                {
                    b.HasOne("UEW_Quality_Assurance.Models.Prog", "Program")
                        .WithMany()
                        .HasForeignKey("programID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Campus", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Department", b =>
                {
                    b.Navigation("Program");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("UEW_Quality_Assurance.Models.Student", b =>
                {
                    b.Navigation("Enrollment");
                });
#pragma warning restore 612, 618
        }
    }
}
